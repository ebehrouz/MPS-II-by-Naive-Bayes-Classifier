OPTIONS COMPRESS=YES REUSE=YES;/*Creating NVAF patient dataset from EncounterDiagnosis, billing,...*/
Data Encounter (keep=Patient_ID   Network_ID DiagnosisCode_calc   DateCreated);
Set Extr2017.EncounterDiagnosis ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data Billing (keep=Patient_ID   Network_ID DiagnosisCode_calc  DateCreated);
Set Extr2017.Billing ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data healthcondition (keep=Patient_ID  Network_ID   DiagnosisCode_calc  DateCreated);
Set Extr2017.healthcondition  ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data BillingEncounterHealth;
Set  Encounter  Billing  healthcondition;
Run;
Data BillingEncounterHealth;/*Inclusion Criteria*/
Set BillingEncounterHealth;
OnSetDate=input(DateCreated,yymmdd10.);
format OnSetDate  MMDDYY10. ; 
Drop DateCreated DiagnosisCode_calc;
If   DiagnosisCode_calc="427.3"  or  DiagnosisCode_calc="427.31" or DiagnosisCode_calc="427.32"  then AF0=1;
else AF0=0;
Run;
proc sort data=BillingEncounterHealth ;
key Patient_ID   / ascending ;
key   AF0/ DESCENDING;  
run;
proc sort data=BillingEncounterHealth   nodupkey;
By  Patient_ID  ;
run;

OPTIONS COMPRESS=YES REUSE=YES;
Data Encounter1 (keep=Patient_ID   DiagnosisCode_calc );
Set Extr2017.EncounterDiagnosis ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data Billing1 (keep=Patient_ID   DiagnosisCode_calc  );
Set Extr2017.Billing ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data healthcondition1 (keep=Patient_ID   DiagnosisCode_calc  );
Set Extr2017.healthcondition  ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data BillingEncounterHealth1;
Set  Encounter1  Billing1  healthcondition1;
Run;
OPTIONS COMPRESS=YES REUSE=YES; /*Exclusion*/
Data BillingEncounterHealth1 ;
Set  BillingEncounterHealth1 ;
If   DiagnosisCode_calc in ("394","394.0","394.1","394.2","394.9","395","395.0","395.1","395.2","395.9", "396","396.0","396.1","396.2","396.3","396.9",
"424","424.0","424.1","424.2","424.3","424.9","424.90","424.91","424.99","V43.3") then Exclusion=1;
else Exclusion=0;
Run;
proc sort data=BillingEncounterHealth1;
key Patient_ID  / ascending ;
key Exc/ DESCENDING;  
run;
proc sort data=BillingEncounterHealth1 NODUPKEY ;
By  Patient_ID   ;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data BillingEncounterHealth1  (Drop=DiagnosisCode_calc) ;
Set  BillingEncounterHealth1;
Run;

OPTIONS COMPRESS=YES REUSE=YES; /* All AF patients*/
Data AF2017.P ;
Merge   BillingEncounterHealth  (IN=In1)  BillingEncounterHealth1 (IN=In2)  ;
By Patient_ID ; 
If (In1=1 OR In2=1 ) then Output  AF2017.P ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;  
Data AF2017.P ;
Set AF2017.P;
If  AF0=1  and  Exc=0  then  AF=1;
else AF=0; 
Run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data AF2017.P  (Drop=AF0  Exc  ) ;
Set AF2017.P;
Run;


OPTIONS COMPRESS=YES REUSE=YES;  /*Demographic*/
Data  AF2017.Demographic (keep=Patient_ID  Sex  Age  Diabetes Hypertension OtherDiseases Date_of_Encounter );
Set   C1Table.Comprehensive_Table ;
If Age=. then delete;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data AF2017.AF ;
Merge   AF2017.Demographic (IN=In1)  AF2017.P (IN=In2)  ;
By Patient_ID ; 
If (In1=1 OR In2=1 ) then Output  AF2017.AF ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data AF2017.AF ;
Set AF2017.AF;
where Age>20 ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  AF2017.AF ;
Set  AF2017.AF;
If  AF=. then AF=0;
Run; 
proc sort data=AF2017.AF;
key Patient_ID   / ascending ;
key  AF / descending ;
run;
Data  AF2017.AF; 
Length AFAge $50;
set  AF2017.AF;
If    20<Age<=64  then   AFAge="20-64";
else If   64<Age<=74 then   AFAge="65-74";
else If   74<Age  then  AFAge="75+";
else    AFAge=" ";
Run;

/****Adding All Medications used**** */

OPTIONS COMPRESS=YES REUSE=YES;
Data medication (keep=Patient_ID   Sex  AF);
Set  AF2017.AF;
where AF=1;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
DATA AF2017.medication2;
MERGE  medication(IN=In1)  AF2017.medication(IN=In2) ;
BY Patient_ID;
IF In1=1  then output   AF2017.medication2;
RUN; 
proc sort data=AF2017.medication2 nodupkey;
By  Patient_ID  Name_calc;
run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data medication (Drop=Sex  AF ) ; 
Set  AF2017.medication2 ;
If Name_calc="WARFARIN" then WARFARIN=1;
else WARFARIN=0;
If Name_calc="ACETYLSALICYLIC ACID" then ASA=1;
else ASA=0;
If Name_calc="METOPROLOL" then METOPROLOL=1;
else METOPROLOL=0;
If Name_calc="FUROSEMIDE" then FUROSEMIDE=1;
else FUROSEMIDE=0;
If Name_calc="ROSUVASTATIN" then ROSUVASTATIN=1;
else ROSUVASTATIN=0;
If Name_calc="RAMIPRIL" then RAMIPRIL=1;
else RAMIPRIL=0;
If Name_calc="HYDROCHLOROTHIAZIDE" then HYDROCHLOROTHIAZIDE=1;
else HYDROCHLOROTHIAZIDE=0;
If Name_calc="AMLODIPINE" then AMLODIPINE=1;
else AMLODIPINE=0;
If Name_calc="RIVAROXABAN" then RIVAROXABAN=1;
else RIVAROXABAN=0;
If Name_calc="BISOPROLOL" then BISOPROLOL=1;
else BISOPROLOL=0;
If Name_calc="GLYCERYL TRINITRATE" then GLYCERYL_T=1;
else GLYCERYL_T=0;
If Name_calc="DABIGATRAN ETEXILATE" then DABIGATRAN_E=1;
else DABIGATRAN_E=0;
If Name_calc="APIXABAN" then APIXABAN=1;
else APIXABAN=0;
If Name_calc="CLOPIDOGREL" then CLOPIDOGREL=1;
else CLOPIDOGREL=0;
If Name_calc="TICAGRELOR" then TICAGRELOR=1;
else TICAGRELOR=0;
If Name_calc="EDOXABAN" then EDOXABAN=1;
else EDOXABAN=0;
If Name_calc="PRASUGREL" then PRASUGREL=1;
else PRASUGREL=0;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  WARFARIN (keep=Patient_ID WARFARIN ) ;
Set  medication;
Run;
proc sort data=WARFARIN ;
key Patient_ID  / ascending ;
key WARFARIN/ DESCENDING;  
run;
Data WARFARIN;
Set WARFARIN;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  ASA (keep=Patient_ID ASA ) ;
Set  medication;
Run;
proc sort data=ASA ;
key Patient_ID  / ascending ;
key ASA/ DESCENDING;  
run;
Data ASA;
Set ASA;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  METOPROLOL(keep=Patient_ID METOPROLOL ) ;
Set  medication;
Run;
proc sort data=METOPROLOL ;
key Patient_ID  / ascending ;
key METOPROLOL/ DESCENDING;  
run;
Data METOPROLOL;
Set METOPROLOL;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  FUROSEMIDE(keep=Patient_ID FUROSEMIDE ) ;
Set  medication;
Run;
proc sort data=FUROSEMIDE ;
key Patient_ID  / ascending ;
key FUROSEMIDE/ DESCENDING;  
run;
Data FUROSEMIDE;
Set FUROSEMIDE;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  ROSUVASTATIN(keep=Patient_ID ROSUVASTATIN ) ;
Set  medication;
Run;
proc sort data=ROSUVASTATIN ;
key Patient_ID  / ascending ;
key ROSUVASTATIN/ DESCENDING;  
run;
Data ROSUVASTATIN;
Set ROSUVASTATIN;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  RAMIPRIL(keep=Patient_ID RAMIPRIL ) ;
Set  medication;
Run;
proc sort data=RAMIPRIL ;
key Patient_ID  / ascending ;
key RAMIPRIL/ DESCENDING;  
run;
Data RAMIPRIL;
Set RAMIPRIL;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  HYDROCHLOROTHIAZIDE(keep=Patient_ID HYDROCHLOROTHIAZIDE ) ;
Set  medication;
Run;
proc sort data=HYDROCHLOROTHIAZIDE;
key Patient_ID  / ascending ;
key HYDROCHLOROTHIAZIDE/ DESCENDING;  
run;
Data HYDROCHLOROTHIAZIDE;
Set HYDROCHLOROTHIAZIDE;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  AMLODIPINE(keep=Patient_ID AMLODIPINE ) ;
Set  medication;
Run;
proc sort data=AMLODIPINE ;
key Patient_ID  / ascending ;
key AMLODIPINE/ DESCENDING;  
run;
Data AMLODIPINE;
Set AMLODIPINE;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  RIVAROXABAN(keep=Patient_ID RIVAROXABAN ) ;
Set  medication;
Run;
proc sort data=RIVAROXABAN ;
key Patient_ID  / ascending ;
key RIVAROXABAN/ DESCENDING;  
run;
Data RIVAROXABAN;
Set RIVAROXABAN;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  BISOPROLOL(keep=Patient_ID BISOPROLOL ) ;
Set  medication;
Run;
proc sort data=BISOPROLOL ;
key Patient_ID  / ascending ;
key BISOPROLOL/ DESCENDING;  
run;
Data BISOPROLOL;
Set BISOPROLOL;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  GLYCERYL_T(keep=Patient_ID GLYCERYL_T) ;
Set  medication;
Run;
proc sort data=GLYCERYL_T ;
key Patient_ID  / ascending ;
key GLYCERYL_T/ DESCENDING;  
run;
Data GLYCERYL_T;
Set GLYCERYL_T;
by Patient_ID;
if first. Patient_ID;
run;

OPTIONS COMPRESS=YES REUSE=YES;
Data DABIGATRAN_E (keep=Patient_ID DABIGATRAN_E ) ;
Set  medication;
Run;
proc sort data=DABIGATRAN_E ;
key Patient_ID  / ascending ;
key DABIGATRAN_E/ DESCENDING;  
run;
Data DABIGATRAN_E;
Set DABIGATRAN_E;
by Patient_ID;
if first. Patient_ID;
run;

OPTIONS COMPRESS=YES REUSE=YES;
Data  APIXABAN (keep=Patient_ID APIXABAN ) ;
Set  medication;
Run;
proc sort data=APIXABAN ;
key Patient_ID  / ascending ;
key APIXABAN/ DESCENDING;  
run;
Data APIXABAN;
Set APIXABAN;
by Patient_ID;
if first. Patient_ID;
run;

OPTIONS COMPRESS=YES REUSE=YES;
Data  CLOPIDOGREL (keep=Patient_ID CLOPIDOGREL ) ;
Set  medication;
Run;
proc sort data=CLOPIDOGREL ;
key Patient_ID  / ascending ;
key CLOPIDOGREL/ DESCENDING;  
run;
Data CLOPIDOGREL;
Set CLOPIDOGREL;
by Patient_ID;
if first. Patient_ID;
run;

OPTIONS COMPRESS=YES REUSE=YES;
Data  TICAGRELOR (keep=Patient_ID TICAGRELOR ) ;
Set  medication;
Run;
proc sort data=TICAGRELOR ;
key Patient_ID  / ascending ;
key TICAGRELOR/ DESCENDING;  
run;
Data TICAGRELOR;
Set TICAGRELOR;
by Patient_ID;
if first. Patient_ID;
run;

OPTIONS COMPRESS=YES REUSE=YES;
Data EDOXABAN (keep=Patient_ID EDOXABAN ) ;
Set  medication;
Run;
proc sort data=EDOXABAN ;
key Patient_ID  / ascending ;
key EDOXABAN/ DESCENDING;  
run;
Data EDOXABAN;
Set EDOXABAN;
by Patient_ID;
if first. Patient_ID;
run;

OPTIONS COMPRESS=YES REUSE=YES;
Data  PRASUGREL (keep=Patient_ID PRASUGREL ) ;
Set  medication;
Run;
proc sort data=PRASUGREL ;
key Patient_ID  / ascending ;
key PRASUGREL/ DESCENDING;  
run;
Data PRASUGREL;
Set PRASUGREL;
by Patient_ID;
if first. Patient_ID;
run;

OPTIONS COMPRESS=YES REUSE=YES; 
Data AF2017.Med  ;
Merge   WARFARIN  (IN=In1)  ASA (IN=In2)   METOPROLOL (IN=In3) FUROSEMIDE (IN=In4)  
ROSUVASTATIN(IN=In5)  RAMIPRIL(IN=In6) HYDROCHLOROTHIAZIDE (IN=In7)  AMLODIPINE (IN=In8)  
RIVAROXABAN (IN=In9)  BISOPROLOL(IN=In10)  GLYCERYL_T(IN=In11)  DABIGATRAN_E (IN=In12)  APIXABAN (IN=In13)  CLOPIDOGREL (IN=In14) 
TICAGRELOR (IN=In15)  EDOXABAN(IN=In16) PRASUGREL (IN=In17);
By Patient_ID ; 
If (In1=1 OR In2=1 OR In3=1 OR In4=1 OR In5=1 OR In6=1 OR In7=1 OR In8=1 OR In9=1 OR In10=1 
OR In11=1 OR In12=1 OR In13=1 OR In14=1 OR In15=1 OR In16=1 OR In17=1 ) then Output  AF2017.Med ;
Run;


/*Adding  AllEncounters*/
OPTIONS COMPRESS=YES REUSE=YES;
Data AllEncounters (keep=Patient_ID  EncounterDate );
Set Extr2017.Encounter;
Run;
proc sort data=AllEncounters  nodupkey;
By  Patient_ID  EncounterDate;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data AllEncounters ;
Set AllEncounters;
If EncounterDate  not eq "." then Visit=1;
else Visit=0 ;
Run; 
OPTIONS COMPRESS=YES REUSE=YES;
Data AllEncounters (drop=EncounterDate);
Set  AllEncounters;
Run; 
OPTIONS COMPRESS=YES REUSE=YES;
DATA AF2017.AllEncounters2;
MERGE  AF2017.AF(IN=In1)  AllEncounters(IN=In2) ;
BY Patient_ID;
IF In1=1  OR In2=1  then output   AF2017.AllEncounters2;
RUN; 
data AF2017.AllEncounters2;
set AF2017.AllEncounters2;
by Patient_ID;
if First.Patient_ID then Visit1 = 0;
Visit1 + Visit;
run;
data AF2017.AllEncounters2 (keep=AFAge Patient_ID Sex Age  AF Visit1 );
set AF2017.AllEncounters2;
run;
proc sort data=AF2017.AllEncounters2;
key Patient_ID / ascending ;
key Visit1 / DESCENDING;  
run;
Data AF2017.AllEncounters2;
Set AF2017.AllEncounters2;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data  AllEncounters  (Keep=Patient_ID Visit1); 
Set  AF2017.AllEncounters2 ;
Data  AllEncounters  ; 
Set  AllEncounters ;
Rename  Visit1=Visits;
Run;

/*Adding  BMI*/
OPTIONS COMPRESS=YES REUSE=YES;
Data BMI (keep=Patient_ID BMI   );
Set C1Table.Comprehensive_Table;
Run;
proc sort data= BMI ;
key Patient_ID    / ascending ;
key  BMI   /descending ;
run;
proc sort data=BMI nodupkey;
By  Patient_ID  ;
run;

/*Adding  Location*/

OPTIONS COMPRESS=YES REUSE=YES; 
Data  Location; 
Set  AF2017.Location;
Run;
proc sort data=Location;
key Patient_ID / ascending ;
key Location  / DESCENDING;  
run;
proc sort data=Location nodupkey;
By  Patient_ID  ;
run;

/*Adding  CHADS2 components*/
Proc print data=AF2017.Location  (obs=1000);
run; 

OPTIONS COMPRESS=YES REUSE=YES; 
Data AF2017.CHADS3  (keep=Patient_ID Sex  Age  AF Diabetes Hypertension OtherDiseases);
Merge   AF2017.AF  (IN=In1)  C1Table.Comprehensive_Table (IN=In2)  ;
By Patient_ID ; 
If  (In1=1 ) then Output  AF2017.CHADS3 ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data   AF2017.CHADS3;
Set   AF2017.CHADS3 ;
If   OtherDiseases in ("428","428.0","428.1","428.2","428.20","428.21","428.22","428.23","428.3","428.30","428.31"
,"428.32","428.33","428.4","428.40","428.41","428.42","428.43","428.9") then CHF=1; /*Heart Failure*/
else CHF=0;
If   OtherDiseases in ("435", "435.0", "435.1", "435.2", "435.3", "435.8",  "435.9","434","434.0","434.00","434.01"
,"434.1","434.10","434.11","434.9","434.90","434.91") then TIA=2; /*Stroke (Occlusion of cerebral arteries) OR Transient ischemic attack*/
else TIA=0;
If Age>=75 then CHAD_Age=1 ;
else  CHAD_Age=0;
Run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data   AF2017.CHADS3 (keep= Patient_ID AF Sex  Diabetes Hypertension CHAD_Age CHF TIA ) ;
Set   AF2017.CHADS3 ;
Run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data   AF2017.CHADS3_1 (keep= Patient_ID Sex  AF Diabetes) ;
Set   AF2017.CHADS3 ;
Run;
proc sort data= AF2017.CHADS3_1 ;
key Patient_ID / ascending ;
key Diabetes / DESCENDING;  
run;
Data  AF2017.CHADS3_1 ;
Set  AF2017.CHADS3_1 ;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data   AF2017.CHADS3_2 (keep= Patient_ID Sex  AF Hypertension) ;
Set   AF2017.CHADS3 ;
Run;
proc sort data= AF2017.CHADS3_2;
key Patient_ID / ascending ;
key Hypertension / DESCENDING;  
run;
Data  AF2017.CHADS3_2 ;
Set  AF2017.CHADS3_2 ;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data   AF2017.CHADS3_3 (keep= Patient_ID Sex  AF CHF) ;
Set   AF2017.CHADS3 ;
Run;
proc sort data= AF2017.CHADS3_3;
key Patient_ID / ascending ;
key CHF / DESCENDING;  
run;
Data  AF2017.CHADS3_3 ;
Set  AF2017.CHADS3_3 ;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data   AF2017.CHADS3_4 (keep= Patient_ID Sex  AF  TIA) ;
Set   AF2017.CHADS3;
Run;
proc sort data= AF2017.CHADS3_4;
key Patient_ID / ascending ;
key TIA / DESCENDING;  
run;
Data  AF2017.CHADS3_4 ;
Set  AF2017.CHADS3_4 ;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES; 
Data   AF2017.CHADS3_5 (keep= Patient_ID Sex  AF CHAD_Age) ;
Set   AF2017.CHADS3 ;
Run;
proc sort data= AF2017.CHADS3_5;
key Patient_ID / ascending ;
key CHAD_Age / DESCENDING;  
run;
Data  AF2017.CHADS3_5 ;
Set  AF2017.CHADS3_5 ;
by Patient_ID;
if first. Patient_ID;
run;
OPTIONS COMPRESS=YES REUSE=YES; /* All AF patients*/
Data AF2017.CHADS_7 ;
Merge   AF2017.CHADS3_1  (IN=In1)  AF2017.CHADS3_2 (IN=In2)  AF2017.CHADS3_3 (IN=In3)  AF2017.CHADS3_4 (IN=In4)  AF2017.CHADS3_5 (IN=In5)  ;
By Patient_ID ; 
If  (In1 Or In2 Or In3 Or In4 Or In5 ) then Output  AF2017.CHADS_7 ;
Run;
OPTIONS COMPRESS=YES REUSE=YES; /*Exclusion*/
Data   AF2017.CHADS_7;
Set   AF2017.CHADS_7 ;
CHADS2=Diabetes+Hypertension+CHF+TIA+CHAD_Age ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data  AF2017.CHADS_7 (Drop=CHAD_Age); 
Set  AF2017.CHADS_7;
Run;


/****Adding All Referral**** */

Proc print data=AF2017.CHADS_7(obs=1000);
run; 
proc freq data=Referral   order=freq ;
table  Referral   / Missing NOCUM NOROW NOCOL  ;
Run;


OPTIONS COMPRESS=YES REUSE=YES;
Data AF2017.Referral (keep=Patient_ID   Name_calc );
Set  Extr2017.Referral ;
Run;
proc sort data=AF2017.Referral;
key Patient_ID / ascending ;
key Name_calc  / DESCENDING;  
run;
proc sort data=AF2017.Referral nodupkey;
By  Patient_ID  Name_calc;
run;
OPTIONS COMPRESS=YES REUSE=YES;
Data AF2017.Referral ;
Set  AF2017.Referral;
If  Name_calc="Referral to cardiology service"  then Referral=1;
else Referral=0; 
Run;
OPTIONS COMPRESS=YES REUSE=YES;
DATA Referral;
MERGE  AF2017.ML1(IN=In1)  AF2017.Referral(IN=In2) ;
BY Patient_ID;
IF In1=1  then output   Referral;
RUN; 
proc sort data=Referral (keep=Patient_ID   Referral );
key Patient_ID / ascending ;
key Referral  / DESCENDING;  
run;
proc sort data=Referral nodupkey;
By  Patient_ID  ;
run;
Data Referral ;
Set  Referral;
If Referral=. then Referral=0;
Run;

/****Adding: Blood Clotting: International Normalised Ratio (INR)**** */
OPTIONS COMPRESS=YES REUSE=YES;
Data  lab (keep=Patient_ID   Name_calc  TestResult_calc);
Set  Extr2017.lab ;
where Name_calc="International Normalized Ratio (INR)" ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data lab ;
Set  lab;
If   "2">TestResult_calc  then INR_Low=1;/*Out of normal range:2-3, see: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4451756/pdf/40256_2015_Article_120.pdf */
else INR_Low=0;
If   TestResult_calc>"3"  then INR_High=1;
else INR_High=0;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data lab1 ;
Set  lab;
INR=INR_Low+INR_High;
Run;
proc sort data=lab1 (keep=Patient_ID   INR );
key Patient_ID / ascending ;
key INR / DESCENDING;  
run;
proc sort data=lab1 nodupkey;
By  Patient_ID  ;
run;
OPTIONS COMPRESS=YES REUSE=YES;
DATA INR;
MERGE  AF2017.ML1(IN=In1)  lab1(IN=In2) ;
BY Patient_ID;
IF In1=1  then output   INR;
RUN; 
Data INR ;
Set  INR;
If INR=. then INR=0;
Run;
proc freq   Data=INR;
tables  AF*INR /  Missing    ;
Run;
Data INR  (Keep=Patient_ID   INR);
Set  INR;
Run;
proc sort data=INR (keep=Patient_ID   INR );
key Patient_ID / ascending ;
key INR / DESCENDING;  
run;
proc sort data=INR  nodupkey;
By  Patient_ID  ;
run;


/* All AF patients*/
proc contents data=MLAF2017.ML2  ;
run;
Proc print data=AF2017.Med (obs=1000);
run; 


OPTIONS COMPRESS=YES REUSE=YES;
Data AF  (keep=Patient_ID Sex  Age Network_ID  AF );
Set  AF2017.AF1;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data AF ;
Set  AF;
Rename AF=NVAF ;
Run;


OPTIONS COMPRESS=YES REUSE=YES; 
Data MLAF2017.ML2  ;
Merge   AF  (IN=In1)  AF2017.CHADS_7 (IN=In2)  AF2017.Med (IN=In3)  AllEncounters(IN=In4)  BMI(IN=In5) 
Location (IN=In6)  Referral (IN=In7)  INR(IN=In8);
By Patient_ID ; 
If (In1=1 OR In2=1 OR In3=1 OR In4=1 OR In5=1 OR In6=1 OR In7=1 OR In8=1 ) then Output  MLAF2017.ML2 ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data MLAF2017.ML2  (Drop= AF count All_Med);
Set  MLAF2017.ML2;
where Age>20 ;
Run;
OPTIONS COMPRESS=YES REUSE=YES;
Data MLAF2017.ML2 ;
Set  MLAF2017.ML2;
If  NVAF=. then NVAF=0 ;
If  WARFARIN=. then WARFARIN=0 ;
If  ASA=. then ASA=0 ;
If  METOPROLOL=. then METOPROLOL=0 ;
If  FUROSEMIDE=. then FUROSEMIDE=0 ;
If  ROSUVASTATIN=. then ROSUVASTATIN=0 ;
If  RAMIPRIL=. then RAMIPRIL=0 ;
If  HYDROCHLOROTHIAZIDE=. then HYDROCHLOROTHIAZIDE=0 ;
If  AMLODIPINE=. then AMLODIPINE=0 ;
If  RIVAROXABAN=. then RIVAROXABAN=0 ;
If  BISOPROLOL=. then BISOPROLOL=0 ;
If  GLYCERYL_T=. then GLYCERYL_T=0 ;
If  Visits=. then Visits=0 ;
If  CHF=. then CHF=0 ;
If  TIA=. then TIA=0 ;
If  Referral=. then Referral=0 ;
If  DABIGATRAN_E=. then DABIGATRAN_E=0 ;
If  APIXABAN=. then APIXABAN=0 ;
If  CLOPIDOGREL=. then CLOPIDOGREL=0 ;
If  TICAGRELOR=. then TICAGRELOR=0 ;
If  EDOXABAN=. then EDOXABAN=0 ;
If  PRASUGREL=. then PRASUGREL=0 ;
Run;


/* To make subsets*/

OPTIONS COMPRESS=YES REUSE=YES; /*This was used for ANN training and Enterprise Miner*/
Data MLAF2017.Training ;
Set  MLAF2017.ML2;
where Network_ID not eq  5;
Run;

OPTIONS COMPRESS=YES REUSE=YES; /*This was used for ANN scoring and Enterprise Miner*/
Data MLAF2017.Score  (Drop= count);
Set  MLAF2017.ML2;
Rename NVAF=EHR_NVAF;
where Network_ID eq  5;
Run;



